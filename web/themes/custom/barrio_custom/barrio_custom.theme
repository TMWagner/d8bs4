<?php

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\views\Views;
use Drupal\taxonomy\Entity\Term;


/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;




/**
 * @param $variables
 * Implements function template_preprocess_field
 * T. Wagner
 *
 * Dynamically add buttons to RLP page
 *
 *
 */
function barrio_custom_preprocess_field(&$variables) {

  $debug = $variables;
//  Expecting the field 'field_misc_footer'
//  We will send an array of our own to the a custom template that outputs only our data
//   @todo Test for empty field name?
  if ($variables["element"]["#field_name"] == 'field_misc_footer') {

    $button_links = false;

    /**
     * Get the Groups
     * Parameter is the Taxonomy ID
     * (e.g., HIV = 9)
     * @todo There will often be multiple values.
     * Just grab the array.
     *
     */

    // Check to see if there are any groups specified. If not, there is nothing to do
    // No groups - no buttons
    $groups = $variables["element"]["#object"]->get("field_group")->getString();
    if (!empty($groups)) {
      $button_links = true;
      $groups = str_replace(' ', '', $groups);
      // We have groups specified - build the links if there is content


      /**
       * Check for Publications for this research group
       */
      // Set view arguments
      $profile_id = 'publications_listings';
      //Group is the Taxonomy term we pass as an argument to the query
      //@todo remove hardcoded and use parameter ($groups)
      // 9 = HIV
      $group = 9;

      // Load View object
      // Need graceful recovery if View doesn't exist
      $view = \Drupal\views\Views::getView($profile_id);
      $view->setDisplay('research_group');
      $view->setArguments(array($group));
      $view->execute();


      if (!empty($view->result)) {

        $output = null;

        //Build wrapper
        $output['rlp-buttons'] = [
          '#type' => 'container',
          '#prefix' => '<div class="rlp-footer-wrap">',
          '#suffix' => '</div>',
        ];
        //Build button
        $output['rlp-buttons']['pubs'] = [
          '#type' => 'link',
          '#title' => 'Publications',
          '#attributes' => ['class' => ['btn btn-outline-primary idm-button-main']],
          '#url' => Url::fromRoute('view.publications_listings.research_group', [
            'arg_0' => '9'
          ]),
//          '#prefix' => '<div class="profile_bio_static link">',
//          '#suffix' => '</div>',
        ];

        //@todo test button two (remove after test

        //Build button (test
        $output['rlp-buttons']['test'] = [
          '#type' => 'link',
          '#title' => 'Projects',
          '#attributes' => ['class' => ['btn btn-outline-primary idm-button-main']],
          '#url' => Url::fromRoute('view.publications_listings.research_group', [
            'arg_0' => '9'
          ]),
        ];



        //End
      }

//
//
      /**
       * $url = Url::fromRoute('entity.node.canonical', ['node' => 42], $options);

       * entity.node.canonical                                 /node/{node}
       * view.publications_listings.publications_uid           /publications_uid/{arg_0}
       *
       * people.profile_ajax_link_callback                     /profile/{option}/{uid}/{nojs}
       * '#url' => Url::fromRoute('people.profile_ajax_link_callback', [
              'option' => 'contact',
              'uid' => $uid,
              'nojs' => 'ajax'
          ]),
       */


//      $output['button'] = array (
//        '#type' => 'markup',
//        '#markup' => 'Publications',
//        '#prefix' => '<div class="profile-button-wrap">
//                    <a class="profile btn btn-primary">',
//        '#suffix' => '</a></div>',
//      );
      $variables['buttons'] = $output;

    }



    /**
     * Check for Projects for this research group
     */

    /**
     * Check for Videos for this research group
     */

  }
}



/**
 * @param $variables
 */
function barrio_custom_preprocess_container(&$variables) {

  $variables['people_profile_mobile_flag'] = false;
  // Get the current path:
  $path = $current_path = \Drupal::service('path.current')->getPath();

  // Expecting /profile/nnn/mobile
  $urlparts = explode('/', $path);
  if (isset($urlparts[3])) {
    if ($urlparts[1] === 'profile' && $urlparts[3] === 'mobile') {
      //@todo we need to differentiate between containers

      $variables["no_swap"] = false;
      $variables['people_profile_mobile_flag'] = true;
    }
  }

}

/**
 * Implements hook_preprocess_HOOK
 * @param $variables
 */
function barrio_custom_preprocess_views_view__people(&$variables) {

  //If called from Mobile implementation, add class to identify that
  //Get the path
  $path = $current_path = \Drupal::service('path.current')->getPath();
  // Expecting /profile/nnn/mobile
  $urlparts = explode('/', $path);
  $variables['people_profile_mobile_flag'] = false;

//  @todo should check all three perhaps
  if (isset($urlparts[3])) {
    if ($urlparts[1] === 'profile' && $urlparts[3] === 'mobile') {
      $variables['people_profile_mobile_flag'] = TRUE;
    }
  }

}



/**
 * @param $variables
 */
function barrio_custom_preprocess_layout__onecol(&$variables) {

  // This example is from rdf_preprocess_image(). It adds an RDF attribute
  // to the image hook's variables.
  $viewmode = $variables["content"]["#view_mode"];
  $variables['research_content'] = FALSE;


  // Test for research node
  $bundle = $variables["content"]["#bundle"];
  if ($bundle === 'research') {
    $variables['research_content'] = TRUE;
    $entityType = $variables["content"]["#entity_type"];


    //if called from rlp
    // Get the current path.
    $path = $current_path = \Drupal::service('path.current')->getPath();

    $pathpieces = explode("/", $path);
    $parm1 = $pathpieces[1];
    $parm2 = $pathpieces[2];

  }
  //$variables["content"]["field_user_title"]["#object"]->values["uid"]["x-default"]
  //$variables["content"]["#view_mode"]


  $user = User::load(\Drupal::currentUser()->id());
  $uid = $user->get('uid');

  $variables['research_team'] = false;
  $variables['team_member_uid'] = null;
  if ($viewmode == 'user_team_card') {
    //do some work
    $variables['research_team'] = TRUE;

//    // or just
//    $user = User::load(\Drupal::currentUser()->id());
//    $uid = $user->get('uid');

    //@todo This works, but is soooo ugly.
    $user = $variables["content"]["#user"];
    $uid = $user->get('uid')->getValue();
    $uidValue = $uid[0]["value"];
    //Create a variable for the user with the UID inserted.
    $variables['team_member_uid'] = $uid[0]["value"];


    //@todo this just returns null
    $uid = $user->values["uid"];

  }

}

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 * 
 * Example on how to alter theme settings form
 * 
 */
function barrio_custom_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}




/**
 * @param $variables
 *
 * Implement hook_preprocess_views_view_unformatted
 *
 * If this is for the Tools landing page view, we are going add two variables
 * - tools-category is a true/false flag to indicate whether there are new
 *   classes to add
 * - tools-category-classes is the string of classes
 *
 */
function barrio_custom_preprocess_views_view_unformatted(&$variables) {

  // Determine which view this is from
  $view = $variables['view'];
  $id = $view->storage->id();



  // We are only going execute the following if we are looking at the right view. (tools_landing_page)
  if ($id === 'tools_landing_page') {

    // @todo This blew up the website
    //$tools_array = $view->result;

    // Initialize class flag
    $variables['tools_category'] = FALSE;

    /**
     * Process each card from the $rows array
     * @var  $rows
     */
    // Load Array of Tool Rows
    $rows = $variables["rows"];
    foreach ($rows as $tool_key =>$item) {

      $taxonomy_array = $item["content"]["#row"]->_entity->get('field_tools_filter_category')->getValue();

      //loop through result_array to get each taxonomy "class". if array is not empty

      $class_string = null;
      if (!empty($taxonomy_array)) {
        // We have classes to add for this tool item
        $class_string = NULL;
        foreach ($taxonomy_array as $key => $value) {
          // do stuff
          $target_id = $value['target_id'];

          /**
           * Fetch the new class for given taxonomy term
           *
           * See: https://www.frobiovox.com/posts/2016/03/28/simplify-drupal-8-field-value-calls.html
           */

          $taxo = term::load($target_id);
          $field_title = $taxo->get("field_tool_class");
          $class_value = $field_title->value;

          $class_string = $class_string . ' ' . $class_value;
        }
      }

      // Send string of new classes - if there are any.
      /** Set the flag  and initialize array item */
      if ($class_string) {
        $variables['tools_category'] = TRUE;
        $variables['tools_category_classes'][] = $class_string;
      }

    } // end of the outer loop

  }

}
