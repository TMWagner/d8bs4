<?php

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\views\Views;
use Drupal\taxonomy\Entity\Term;


/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;




/**
 * @param $variables
 */
function barrio_custom_preprocess_layout__onecol(&$variables) {

  // This example is from rdf_preprocess_image(). It adds an RDF attribute
  // to the image hook's variables.
  $viewmode = $variables["content"]["#view_mode"];
  $debug = 2;
  $debug = $variables;
  $test = $debug;

  // Test for research node
  $bundle = $variables["content"]["#bundle"];
  $variables['research_content'] = FALSE;
  if ($bundle === 'research') {
    $variables['research_content'] = TRUE;

    //if called from rlp
    // Get the current path.
    $path = $current_path = \Drupal::service('path.current')->getPath();

    $pathpieces = explode("/", $path);
    $parm1 = $pathpieces[1];
    $parm2 = $pathpieces[2];

  }


  $user = User::load(\Drupal::currentUser()->id());
  $uid = $user->get('uid');


  if ($viewmode == 'user_team_card') {
    //do some work

//    // or just
//    $user = User::load(\Drupal::currentUser()->id());
//    $uid = $user->get('uid');

    //@todo This works, but is soooo ugly.
    $user = $variables["content"]["#user"];
    $uid = $user->get('uid')->getValue();
    $uidValue = $uid[0]["value"];


    //@todo this just returns null
    $uid = $user->values["uid"];

  }



//  $taxonomy_array = $item["content"]["#row"]->_entity->get('field_tools_filter_category')->getValue();

//  $variables['attributes']['typeof'] = [
//    'foaf:Image',
//  ];
}

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 * 
 * Example on how to alter theme settings form
 * 
 */
function barrio_custom_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
      'bg-primary' => t('Primary'),
      'bg-secondary' => t('Secondary'),
      'bg-light' => t('Light'),
      'bg-dark' => t('Dark'),
      'bg-white' => t('White'),
      'bg-transparent' => t('Transparent'),
  );
}




/**
 * @param $variables
 *
 * Implement hook_preprocess_views_view_unformatted
 *
 * If this is for the Tools landing page view, we are going add two variables
 * - tools-category is a true/false flag to indicate whether there are new
 *   classes to add
 * - tools-category-classes is the string of classes
 *
 */
function barrio_custom_preprocess_views_view_unformatted(&$variables) {

  // Determine which view this is from
  $view = $variables['view'];
  $id = $view->storage->id();



  // We are only going execute the following if we are looking at the right view. (tools_landing_page)
  if ($id === 'tools_landing_page') {

    // @todo This blew up the website
    //$tools_array = $view->result;

    // Initialize class flag
    $variables['tools_category'] = FALSE;

    /**
     * Process each card from the $rows array
     * @var  $rows
     */
    // Load Array of Tool Rows
    $rows = $variables["rows"];
    foreach ($rows as $tool_key =>$item) {

      $taxonomy_array = $item["content"]["#row"]->_entity->get('field_tools_filter_category')->getValue();

      //loop through result_array to get each taxonomy "class". if array is not empty

      $class_string = null;
      if (!empty($taxonomy_array)) {
        // We have classes to add for this tool item
        $class_string = NULL;
        foreach ($taxonomy_array as $key => $value) {
          // do stuff
          $target_id = $value['target_id'];

          /**
           * Fetch the new class for given taxonomy term
           *
           * See: https://www.frobiovox.com/posts/2016/03/28/simplify-drupal-8-field-value-calls.html
           */

          $taxo = term::load($target_id);
          $field_title = $taxo->get("field_tool_class");
          $class_value = $field_title->value;

          $class_string = $class_string . ' ' . $class_value;
        }
      }

      // Send string of new classes - if there are any.
      /** Set the flag  and initialize array item */
      if ($class_string) {
        $variables['tools_category'] = TRUE;
        $variables['tools_category_classes'][] = $class_string;
      }

    } // end of the outer loop

  }

}
