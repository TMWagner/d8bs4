<?php

/**
 * @file
 * Contains idm.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\views\ViewExecutable;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\views\Form\ViewsForm;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;




/**
 * Implements hook_help().
 */
function idm_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the idm module.
    case 'help.page.idm':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('IDM general module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 * Ref:
 *
 */
function idm_theme() {
  return [
    'idm' => [
      'render element' => 'children',
    ],
  ];
}


/**
 * Implements hook_views_post_render
 * @param \Drupal\views\ViewExecutable $view
 * @param $output
 * @param \CachePluginBase $cache
 *
 */
//function idm_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
//
//  $temp1 = 'bogus';
//  $temp1 = $view;
//
//  $toutput = $output;
//
//  $temp2 = 'stop here';
//
//}


/**
 * @param \Drupal\views\ViewExecutable $view
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function idm_views_pre_render(ViewExecutable $view) {

  $testvar = null;
  // "tools_filter"
//  tools_landing_page

//  $temp1 = $result->values["field_tools_filter_category"]["x-default"][1]["target_id"]
  $testvar = $view->id();

  $view->result[0]->_entity->save('field_tool_name', array(0 => 'dynamic'));



  if ($view->id() == 'tools_landing_page') {

    $view->result[0]->_entity->save('field_tool_name', array(0 => 'dynamic'));
    $args = $view->args[0];
    $result =  $view->result[0]->_entity;
    $viewid = $view->id();
  }
//  $result =  $view->result[0]->_entity;
//
//  $result2 = $view->result[0]->_entity->referencedEntities();
//
//   $result2 = $view->result[0]->_entity->save();



//  $values = $view->result[0]->values;
//  $class = $result->values["field_tool_class"]["x-default"][0]["value"];
//  $deeper1 = $view->result[0]->_entity->values;
//  $deeper1 = $view->result[0]->_entity->values["name"];
//



}



/**
 * Implements hook_entity_view()
 */
function idm_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  // Only do the extra work if the component is configured to be displayed.
  // This assumes a 'mymodule_addition' extra field has been defined for the
  // entity bundle in hook_entity_extra_field_info().

//
//  if ($entity->getEntityType()->id() === 'node') {
//
//    $build['awesome'] =  [
//      '#markup' => '<marquee>IDM V4 amazing content</marquee>',
//      '#allowed_tags' => ['marquee'],
//    ];
//    $build['moretext'] = [
//      '#markup' => '<h2>IDM V4 amazing content</h2>'
//    ];
//
//  }
}


/**
 * @param array $info
 */
function idm_element_info_alter(array &$info) {

  // Decrease the default size of textfields.
  if (isset($info['textfield']['#size'])) {
    $info['textfield']['#size'] = 40;
  }
}

/**
 * @param array $attachments
 * Hook_page_attachements
 * Attach libraries
 */
function idm_page_attachments(array &$attachments) {

  // Unconditionally attach an asset to the page.
  $attachments['#attached']['library'][] = 'core/domready';
  $attachments['#attached']['library'][] = 'core/jquery';
  $attachments['#attached']['library'][] = 'idm/idm';
  $attachments['#attached']['library'][] = 'idm/fontawesome';

  //@todo Not sure we want this on ALL pages...
  //20190222:tmw put this in to get modal working on non-admin pages
  $attachments['#attached']['library'][] = 'core/drupal.dialog.ajax';


  // Get the current path.
  $path = $current_path = \Drupal::service('path.current')->getPath();
  // If we're on the node listing page, add our retro library.
  //

  //We need to define a library specific to the home page (node 168)
  // NavTab is being used for the "How we work" block"
  if ($path == '/node/168') {
    $attachments['#attached']['library'][] = 'idm/navtab';
    $attachments['#attached']['library'][] = 'idm/rvtab';
  };

  // Define library for RLP
  if ($path == '/rlp') {
    $attachments['#attached']['library'][] = 'idm/research';
  };

  /**
   * This is temp code: adding jquery collapse
   * tmw: 2019/01/12
   */
  if ($path == '/node/169') {
    $attachments['#attached']['library'][] = 'idm/jqcollapse';
  };

  /**
   * Attach library for Tools page(s)
   * tmw: 2019/03/8
   */
  if ($path == '/node/170') {
    $attachments['#attached']['library'][] = 'idm/tools';
  };

  //@todo drop this check and just use the fnmatch case?
  if ($path == '/tools') {
    $attachments['#attached']['library'][] = 'idm/tools';
  };

  if (fnmatch("/tools/*", $path)) {
    $attachments['#attached']['library'][] = 'idm/tools';
  }

//  /**
//   * Attach library for Tools page(s)
//   * tmw: 2019/03/11
//   * @todo This is test code for node 171
//   */
//  if ($path == '/node/171') {
//    $attachments['#attached']['library'][] = 'idm/tools';
//  };


}


