<?php

/**
 * @file
 * Contains idm.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\views\ViewExecutable;



/**
 * Implements hook_help().
 */
function idm_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the idm module.
    case 'help.page.idm':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('IDM general module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function idm_theme() {
  return [
    'idm' => [
      'render element' => 'children',
    ],
  ];
}


/**
 * Implements hook_views_pre_render().
 * Inspiration: https://drupalium.com/articles/insert-replace-delete-rows-from-view-results
 *
 * Purpose: insert/change/delete row inside views
 *
 */
//function idm_views_pre_render(ViewExecutable $view) {
//
//  $debug = $view;
//  $debug2 = $view->id();
//  $k = 0;
//  $counter = 0;
//  $temp = [];
//
//  $nth_row = 4; // insert after nth row
//  foreach ($view->result as $key => $value) {
//    $debug_stop = $key;
//    $temp = 'here we are';
//    $test_index = $view->result;
//    if ($k == $nth_row) {
//
//      $counter = $k;
//      $tValue = new $value();
//      $tValue->index = $k; // it is important to handle index properly
//
//      $temp = 'we are inside the loop';
//
//    }
//    $k++;
//  }
//
//
//}



/**
 * @param ViewExecutable $view
 */
//function idm_views_post_execute(ViewExecutable $view) {
//
//  // If there are more than 100 results, show a message that encourages the user
//  // to change the filter settings.
//  // (This action could be performed later in the execution process, but not
//  // earlier.)
//
//  $temp = $view;
//
//  if ($view->total_rows > 11) {
//    \Drupal::messenger()
//      ->addStatus(t('You have more than 11 hits.'));
//  }
//}






/**
 * Implements hook_entity_view()
 */
function idm_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  // Only do the extra work if the component is configured to be displayed.
  // This assumes a 'mymodule_addition' extra field has been defined for the
  // entity bundle in hook_entity_extra_field_info().

//
//  if ($entity->getEntityType()->id() === 'node') {
//
//    $build['awesome'] =  [
//      '#markup' => '<marquee>IDM V4 amazing content</marquee>',
//      '#allowed_tags' => ['marquee'],
//    ];
//    $build['moretext'] = [
//      '#markup' => '<h2>IDM V4 amazing content</h2>'
//    ];
//
//  }
}



/**
 * Implementation of hook_element_info_alter()
 */
function idm_element_info_alter(array &$info) {

  // Decrease the default size of textfields.
  if (isset($info['textfield']['#size'])) {
    $info['textfield']['#size'] = 40;
  }

}

/** 
 * Implements hook_page_attachements()
 */
function idm_page_attachments(array &$attachments) {

  // Unconditionally attach an asset to the page.
  $attachments['#attached']['library'][] = 'core/domready';
  $attachments['#attached']['library'][] = 'core/jquery';
  $attachments['#attached']['library'][] = 'idm/idm';


  // Get the current path.
  $path = $current_path = \Drupal::service('path.current')->getPath();
  // If we're on the node listing page, add our retro library.
  //

  //We need to define a library specific to the home page (node 168)
  // NavTab is being used for the "How we work" block"
  if ($path == '/node/168') {
    $attachments['#attached']['library'][] = 'idm/navtab';
    $attachments['#attached']['library'][] = 'idm/rvtab';
  };

  /**
   * This is temp code: adding jquery collapse
   * tmw: 2019/01/12
   */
  if ($path == '/node/169') {
    $attachments['#attached']['library'][] = 'idm/jqcollapse';
  };


}


