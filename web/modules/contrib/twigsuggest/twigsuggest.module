<?php

/**
 * @file
 * Template Suggester provides template suggestions for things Drupal doesn't.
 */

use Drupal\block\Entity\Block;

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 *
 * * Suggest region-specific block templates.
 *
 * Note: To suggest block type (bundle) specific block templates, use Block Type
 * Templates module, https://www.drupal.org/project/block_type_templates
 *
 * @TODO https://www.drupal.org/project/twigsuggest/issues/3007447
 */
function twigsuggest_theme_suggestions_block_alter(array &$suggestions, array $variables) {

  if (!isset($variables['elements']['#id']) || empty($variables['elements']['#id'])) {
    // Prevent PHP notices if contrib modules create blocks without this ID.
    return $suggestions;
  }

  $block = Block::load($variables['elements']['#id']);

  $suggestions[] = 'block__' . $block->getRegion();
  $suggestions[] = 'block__' . $block->getRegion() . '__' . $variables['elements']['#id'];

  return $suggestions;

  // @TODO decide whether to prefix these suggestions.  Probably best to be
  // consistent but if i were to *not* prefix one, it would actually probably be
  // bundles (content type, block type, etc.).  Block Type Templates gets around
  // this by prefacing its suggestions more intelligibly with 'block-content'
  // (as types only applies to custom, content blocks) so giving it suggestions
  // like this: block--block-content-{{ machine-name-of-block-type }}.html.twig
  // but the code floating out there everywhere from Jeff Burnz (he recommends
  // Block Type Templates module over this earlier code snippet of his) does
  // preface with bundle:
  // if (isset($variables['elements']['content']['#block_content'])) {
  // array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  // }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for layout templates.
 *
 * Fix suggestion of entity type specific layout templates.
 */
function twigsuggest_theme_suggestions_layout_alter(array &$suggestions, array $variables) {

  // Although this appears to be done by default it's actually broken, as seen
  // in this bug report: https://www.drupal.org/project/drupal/issues/2881195
  // Apparently using two underscores/dashes will make it work despite the
  // double-listing (layout--onecol is there twice) still happening.
  if (isset($variables['content']) && is_array($variables['content']) && isset($variables['content']['#ds_configuration']) && $base_theme_hook != 'ds_entity_view') {

    $layout_id = $variables['content']['#ds_configuration']['layout']['id'];
    $layout_id_len = strlen($layout_id);

    foreach ($suggestions as $key => $suggestion) {
      if (strpos($suggestion, $layout_id) === 0) {

        $base_suggest = str_replace('_', '__', $layout_id);
        $suggestions[$key] = substr_replace($suggestion, $base_suggest, 0, $layout_id_len);
      }
    }
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for container templates.
 *
 * Add suggestions, as by default none are provided.
 */
function twigsuggest_theme_suggestions_container_alter(array &$suggestions, array $variables) {

  $element = $variables['element'];

  // We cannot count on template_preprocess_container having run, so we copy
  // its logic here to provide templates for forms (has parents) or not forms.
  // Special handling for form elements.
  if (isset($element['#array_parents'])) {
    $suggestions[] = 'container__has_parent';
  }
  else {
    $suggestions[] = 'container__no_parent';
  }

  if (isset($element['#type']) && $element['#type'] != 'container') {
    $suggestions[] = 'container__' . $element['#type'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__view__' . $element['#name'];
    $suggestions[] = 'container__view__' . $element['#name'] . '__' . $element['#display_id'];
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add template suggestions based on highest user role following the same
 * pattern as for nodes. @see https://www.drupal.org/node/2354645
 *
 * user--[role|uid]--[viewmode].html.twig
 */
function twigsuggest_theme_suggestions_user_alter(array &$suggestions, array $variables) {

  $view_mode = $variables['elements']['#view_mode'];

  /** @var \Drupal\user\Entity\User $user */
  $user = $variables['elements']['#user'];
  $roles = $user->getRoles();
  $highest_role = end($roles);
  $uid = $user->id();

  $suggestions[] = 'user__' . $uid;
  $suggestions[] = 'user__' . $view_mode;
  $suggestions[] = 'user__' . $highest_role;

  $suggestions[] = 'user__' . $uid . '__' . $view_mode;
  $suggestions[] = 'user__' . $highest_role . '__' . $view_mode;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add additional template suggestion based on node type.
 */
function twigsuggest_theme_suggestions_html_alter(array &$suggestions, array $variables) {

  /** @var \Drupal\node\Entity\Node $node */
  if ($node = \Drupal::service('twigsuggest.helper_functions')
    ->getCurrentNode()) {

    $suggestions[] = 'html__node__' . $node->getType();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add additional template suggestion based on node type.
 */
function twigsuggest_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  /** @var \Drupal\node\Entity\Node $node */
  if ($node = \Drupal::service('twigsuggest.helper_functions')
    ->getCurrentNode()) {

    $suggestions[] = 'page__node__' . $node->getType();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function twigsuggest_theme_suggestions_field_alter(array &$suggestions, array $variables) {

  $element = $variables['element'];

  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $entity_type = $element['#entity_type'];
  $bundle = $element['#bundle'];

  $suggestions[] = 'field__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $view_mode;
  $suggestions[] = 'field__' . $entity_type . '__' . $bundle . '__' . $field_name . '__' . $view_mode;
}
